name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: "harshvardhan2003/harsh_app1:latest"
    - name: Deploy to EC2
      env:
# Disables strict host key checking to prevent SSH from prompting the user to verify the host key, which is useful for automated scripts.
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
# chmod 600 private_key: Changes the file permissions of private_key to ensure that only the owner can read and write it,
# which is necessary for security and to comply with SSH   
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
# Ensures that the script will exit immediately if any command exits with a non-zero status.
          set -e
          # Ensure Docker is running
          sudo systemctl start docker
          sudo systemctl enable docker
# with enable docker you can start the container 
          
          # Wait for Docker to be ready
          timeout 60s bash -c "until sudo docker info; do sleep 1; done"
          
          # Stop and remove the existing container if it exists to avoid conflicts 
          # because you can't run the old and new container together 
          sudo docker stop app_container || true
          sudo docker rm app_container || true
          
          # Pull the new Docker image
          sudo docker pull harshvardhan2003/harsh_app1:latest
          
          # Run the new container
          sudo docker run -d --name app_container -p 80:8501 \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e AWS_REGION=us-east-1 \
            harshvardhan2003/harsh_app1:latest

          # Wait for the container to start and check its health
          sleep 10
          if [ "$(sudo docker inspect -f '{{.State.Running}}' app_container)" = "true" ]; then
            echo "Container is running"
          else
            echo "Container failed to start"
            sudo docker logs app_container
            exit 1
          fi
        '

    - name: Debug SSH
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        echo "Attempting to connect to ${{ secrets.EC2_HOST }}"
        ssh -v -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          echo "SSH connection successful"
          sudo systemctl status docker
          sudo docker info
        '

    - name: Verify deployment
      run: |
        echo "Deployment completed. Verify at http://${{ secrets.EC2_HOST }}"
